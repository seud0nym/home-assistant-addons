#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start the sigenergy2mqtt service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Get supervisor configuration:
bashio::log.info "Configuring..."

# Remove obsolete options
if bashio::config.exists 'pvoutput_interval'; then
  bashio::log.info "Removing obsolete option 'pvoutput_interval' from configuration"
  bashio::addon.option 'pvoutput_interval'
fi
  
# Define config options to use:
CMD_PARAMETERS=()

if [[ -e /config/sigenergy2mqtt.yaml ]]; then
  bashio::log.info "Configuration file found, using: /config/sigenergy2mqtt.yaml"
  CMD_PARAMETERS+=(--config="/config/sigenergy2mqtt.yaml")
  HAS_CONFIG=1
else
  bashio::log.info "No configuration file found, enabling Home Assistant discovery by default."
  CMD_PARAMETERS+=(--hass-enabled)
  HAS_CONFIG=0
fi

# Get MQTT parameters from the MQTT add-on
MQTT_HOST=""
MQTT_PASSWORD=""
MQTT_PORT=1883
MQTT_USERNAME=""
if bashio::services.available "mqtt"; then
  MQTT_HOST="$(bashio::services "mqtt" "host")"
  MQTT_PORT="$(bashio::services "mqtt" "port")"
  MQTT_USERNAME="$(bashio::services "mqtt" "username")"
  MQTT_PASSWORD="$(bashio::services "mqtt" "password")"
  bashio::log.info "MQTT service available, using host: ${MQTT_HOST}, port: ${MQTT_PORT}, username: ${MQTT_USERNAME}, password: [REDACTED: ${#MQTT_PASSWORD} chars]"
else
  bashio::log.warning "MQTT service not available, MQTT parameters will be configured from the add-on configuration and/or config file if specified."
fi
# Override the default MQTT parameters if the user has provided values
bashio::log.info "Checking for MQTT overrides in the add-on configuration..."
bashio::config.has_value 'mqtt_host'      && { MQTT_HOST="$(bashio::config 'mqtt_host')"; bashio::log.info "Overriding MQTT host: '${MQTT_HOST}'"; }
bashio::config.has_value 'mqtt_port'      && { MQTT_PORT="$(bashio::config 'mqtt_port')"; bashio::log.info "Overriding MQTT port: '${MQTT_PORT}'"; }
bashio::config.has_value 'mqtt_username'  && { MQTT_USERNAME="$(bashio::config 'mqtt_username')"; bashio::log.info "Overriding MQTT username: '${MQTT_USERNAME}'"; }
bashio::config.has_value 'mqtt_password'  && { MQTT_PASSWORD="$(bashio::config 'mqtt_password')"; bashio::log.info "Overriding MQTT password: [REDACTED: ${#MQTT_PASSWORD} chars]"; }
bashio::config.has_value 'mqtt_tls'       && { MQTT_TLS="$(bashio::config 'mqtt_tls')"; bashio::log.info "MQTT TLS Communication enabled: '${MQTT_TLS}'"; } || MQTT_TLS="false"
bashio::config.has_value 'mqtt_log_level' && CMD_PARAMETERS+=(--mqtt-log-level="$(bashio::config 'mqtt_log_level')")
[[ ! -z "${MQTT_HOST}" ]]                 && CMD_PARAMETERS+=(--mqtt-broker="${MQTT_HOST}")
[[ ! -z "${MQTT_PORT}" ]]                 && CMD_PARAMETERS+=(--mqtt-port="${MQTT_PORT}")
[[ "${MQTT_TLS}" == "true" ]]             && CMD_PARAMETERS+=(--mqtt-tls)
[[ ! -z "${MQTT_USERNAME}" ]]             && CMD_PARAMETERS+=(--mqtt-username="${MQTT_USERNAME}")
[[ ! -z "${MQTT_PASSWORD}" ]]             && CMD_PARAMETERS+=(--mqtt-password="${MQTT_PASSWORD}")
[[ -z "${MQTT_USERNAME}${MQTT_PASSWORD}"  && $HAS_CONFIG == 0 ]] && CMD_PARAMETERS+=(--mqtt-anonymous)

# Get Modbus parameters from the configuration
bashio::config.has_value 'modbus_force_auto_discovery' && MODBUS_AUTO_DISCOVERY="$(bashio::config 'modbus_force_auto_discovery')" || MODBUS_AUTO_DISCOVERY='false'
bashio::config.has_value 'modbus_host'                 && MODBUS_HOST="$(bashio::config 'modbus_host')" || MODBUS_HOST=""
if [[ "${MODBUS_AUTO_DISCOVERY}" == "true" ]]; then
  bashio::log.info "Forcing Modbus auto-discovery"
  CMD_PARAMETERS+=(--modbus-auto-discovery=force)
  bashio::log.info "Resetting 'modbus_force_auto_discovery' to 'false'"
  bashio::addon.option 'modbus_force_auto_discovery' 'false'
  bashio::log.info "modbus_force_auto_discovery=$(bashio::config 'modbus_force_auto_discovery')"
elif [[ "$MODBUS_HOST" == "" && -e /data/sigenergy2mqtt/auto-discovery.yaml ]]; then
  bashio::log.info "Enabling Modbus auto-discovery because auto-discovery cache file exists and no host specified"
  CMD_PARAMETERS+=(--modbus-auto-discovery=once)
elif [[ "$MODBUS_HOST" == "" ]]; then
  bashio::log.info "Enabling Modbus auto-discovery because no Modbus host specified"
  CMD_PARAMETERS+=(--modbus-auto-discovery=once)
else
  [[ "$MODBUS_HOST" != "" ]] && CMD_PARAMETERS+=(--modbus-host="${MODBUS_HOST}")
  if bashio::config.has_value 'modbus_slave'; then
    IFS=', '
    for id in $(bashio::config 'modbus_slave'); do
      CMD_PARAMETERS+=(--modbus-inverter-device-id=$id)
    done
  fi
  if bashio::config.has_value 'modbus_accharger_slave'; then
    IFS=', '
    for id in $(bashio::config 'modbus_accharger_slave'); do
      CMD_PARAMETERS+=(--modbus-accharger-device-id=$id)
    done
  fi
  if bashio::config.has_value 'modbus_dccharger_slave'; then
    IFS=', '
    for id in $(bashio::config 'modbus_dccharger_slave'); do
      CMD_PARAMETERS+=(--modbus-dccharger-device-id=$id)
    done
  fi
fi
bashio::config.has_value 'modbus_port'               && CMD_PARAMETERS+=(--modbus-port="$(bashio::config 'modbus_port')")
bashio::config.has_value 'modbus_log_level'          && CMD_PARAMETERS+=(--modbus-log-level="$(bashio::config 'modbus_log_level')")
bashio::config.has_value 'modbus_read_only'          && MODBUS_READ_ONLY="$(bashio::config 'modbus_read_only')"
if [[ "${MODBUS_READ_ONLY}" == "true" ]]; then
  CMD_PARAMETERS+=(--modbus-readonly) 
  bashio::log.info "Read-only mode enabled, no write operations can be performed."
else
  bashio::log.info "Read-write mode enabled, write operations can be performed."
  if bashio::config.has_value 'modbus_no_remote_ems'; then
    if [[ "$(bashio::config 'modbus_no_remote_ems')" == "true" ]]; then
      CMD_PARAMETERS+=(--modbus-no-remote-ems) 
      bashio::log.info "Remote EMS mode disabled, no remote EMS related sensors will be published."
    fi
  fi
fi

# Get smart-port parameters from the configuration
if bashio::config.has_value 'smartport_enabled'; then
  SMARTPORT_ENABLED="$(bashio::config 'smartport_enabled')"
  if [[ "${SMARTPORT_ENABLED}" == "true" ]]; then
    SMARTPORT_MODULE="$(bashio::config 'smartport_module_name')"
    SMARTPORT_MQTT_TOPIC="$(bashio::config 'smartport_mqtt_topic')"
    if [[ -z "${SMARTPORT_MODULE}" && -z "${SMARTPORT_MQTT_TOPIC}" ]]; then
      bashio::log.fatal "Smart-Port enabled, but neither module name or MQTT topic found; cannot continue."
      exit 1
    else
      bashio::log.info "Smart-Port enabled, using module name: ${SMARTPORT_MODULE} / MQTT topic: ${SMARTPORT_MQTT_TOPIC}"
    fi
    CMD_PARAMETERS+=(--smartport-enabled)
    bashio::config.has_value 'smartport_module_name' && CMD_PARAMETERS+=(--smartport-module-name="${SMARTPORT_MODULE}")
    bashio::config.has_value 'smartport_host'        && CMD_PARAMETERS+=(--smartport-host="$(bashio::config 'smartport_host')")
    bashio::config.has_value 'smartport_username'    && CMD_PARAMETERS+=(--smartport-username="$(bashio::config 'smartport_username')")
    bashio::config.has_value 'smartport_password'    && CMD_PARAMETERS+=(--smartport-password="$(bashio::config 'smartport_password')")
    bashio::config.has_value 'smartport_pv_power'    && CMD_PARAMETERS+=(--smartport-pv-power="$(bashio::config 'smartport_pv_power')")
    bashio::config.has_value 'smartport_mqtt_topic'  && CMD_PARAMETERS+=(--smartport-mqtt-topic="${SMARTPORT_MQTT_TOPIC}")
    bashio::config.has_value 'smartport_mqtt_gain'   && CMD_PARAMETERS+=(--smartport-mqtt-gain="$(bashio::config 'smartport_mqtt_gain')")
  fi
fi

# Get PVOutput parameters from the configuration
if bashio::config.has_value 'pvoutput_enabled'; then
  PVOUTPUT_ENABLED="$(bashio::config 'pvoutput_enabled')"
  if [[ "${PVOUTPUT_ENABLED}" == "true" ]]; then
    PVOUTPUT_API_KEY=""
    PVOUTPUT_SYSTEM_ID=""
    bashio::config.has_value 'pvoutput_api_key'     && PVOUTPUT_API_KEY="$(bashio::config 'pvoutput_api_key')"
    bashio::config.has_value 'pvoutput_system_id'   && PVOUTPUT_SYSTEM_ID="$(bashio::config 'pvoutput_system_id')"
    if [[ -z "${PVOUTPUT_API_KEY}" || -z "${PVOUTPUT_SYSTEM_ID}" ]]; then
      bashio::log.fatal "PVOutput enabled, but API Key and/or System ID not found; cannot continue."
      exit 1
    fi
    CMD_PARAMETERS+=(--pvoutput-enabled)
    CMD_PARAMETERS+=(--pvoutput-api-key="${PVOUTPUT_API_KEY}")
    CMD_PARAMETERS+=(--pvoutput-system-id="${PVOUTPUT_SYSTEM_ID}")
    bashio::log.info "PVOutput enabled, using API Key: [REDACTED: ${#PVOUTPUT_API_KEY} chars] System ID: ${PVOUTPUT_SYSTEM_ID}"  
    bashio::config.has_value 'pvoutput_consumption' && bashio::config 'pvoutput_consumption' && CMD_PARAMETERS+=(--pvoutput-consumption)
    bashio::config.has_value 'pvoutput_temp_topic'  && CMD_PARAMETERS+=(--pvoutput-temp-topic="$(bashio::config 'pvoutput_temp_topic')")
    bashio::config.has_value 'pvoutput_log_level'   && CMD_PARAMETERS+=(--pvoutput-log-level="$(bashio::config 'pvoutput_log_level')")
    bashio::config.has_value 'pvoutput_ext_v7'      && CMD_PARAMETERS+=(--pvoutput-ext-v7="$(bashio::config 'pvoutput_ext_v7')")
    bashio::config.has_value 'pvoutput_ext_v8'      && CMD_PARAMETERS+=(--pvoutput-ext-v8="$(bashio::config 'pvoutput_ext_v8')")
    bashio::config.has_value 'pvoutput_ext_v9'      && CMD_PARAMETERS+=(--pvoutput-ext-v9="$(bashio::config 'pvoutput_ext_v9')")
    bashio::config.has_value 'pvoutput_ext_v10'     && CMD_PARAMETERS+=(--pvoutput-ext-v10="$(bashio::config 'pvoutput_ext_v10')")
    bashio::config.has_value 'pvoutput_ext_v11'     && CMD_PARAMETERS+=(--pvoutput-ext-v11="$(bashio::config 'pvoutput_ext_v11')")
    bashio::config.has_value 'pvoutput_ext_v12'     && CMD_PARAMETERS+=(--pvoutput-ext-v12="$(bashio::config 'pvoutput_ext_v12')")
  fi
fi

# Get Home Assistant parameters from the configuration
bashio::config.has_value 'discovery_prefix'         && CMD_PARAMETERS+=(--hass-discovery-prefix="$(bashio::config 'discovery_prefix')")
bashio::config.has_value 'entity_id_prefix'         && CMD_PARAMETERS+=(--hass-entity-id-prefix="$(bashio::config 'entity_id_prefix')")
bashio::config.has_value 'unique_id_prefix'         && CMD_PARAMETERS+=(--hass-unique-id-prefix="$(bashio::config 'unique_id_prefix')")
bashio::config.has_value 'device_name_prefix'       && CMD_PARAMETERS+=(--hass-device-name-prefix="$(bashio::config 'device_name_prefix')")

# Get logging and debugging parameters from the configuration
bashio::config.has_value 'log_level'                && CMD_PARAMETERS+=(--log-level="$(bashio::config 'log_level')")
bashio::config.has_value 'debug_sensor'             && CMD_PARAMETERS+=(--debug-sensor="$(bashio::config 'debug_sensor')")

# Get the scanning interval frequencies from the configuration
bashio::config.has_value 'scan_interval_low'        && CMD_PARAMETERS+=(--scan-interval-low="$(bashio::config 'scan_interval_low')")
bashio::config.has_value 'scan_interval_medium'     && CMD_PARAMETERS+=(--scan-interval-medium="$(bashio::config 'scan_interval_medium')")
bashio::config.has_value 'scan_interval_high'       && CMD_PARAMETERS+=(--scan-interval-high="$(bashio::config 'scan_interval_high')")
bashio::config.has_value 'scan_interval_realtime'   && CMD_PARAMETERS+=(--scan-interval-realtime="$(bashio::config 'scan_interval_realtime')")

# Get the sanity check default kW value from the configuration
bashio::config.has_value 'sanity_check_default_kw'  && CMD_PARAMETERS+=(--sanity-check-default-kw="$(bashio::config 'sanity_check_default_kw')")

# Get the metrics enabled parameter from the configuration
if bashio::config.has_value 'metrics_enabled'; then
  METRICS_ENABLED="$(bashio::config 'metrics_enabled')"
else
  METRICS_ENABLED="false"
fi
if [[ "${METRICS_ENABLED}" != "true" ]]; then
  CMD_PARAMETERS+=(--no-metrics)
  bashio::log.info "Metrics disabled, not publishing metrics to Home Assistant."
else
  bashio::log.info "Metrics enabled, publishing metrics to Home Assistant."
fi

# Boot up
bashio::log.info "Starting sigenergy2mqtt service..."
for PARAM in "${CMD_PARAMETERS[@]}"; do
  if [[ "$PARAM" == *"password"* || "$PARAM" == *"api-key"* ]]; then
    bashio::log.info " -> Parameter: "${PARAM%%=*}=[REDACTED]""
  else
    bashio::log.info " -> Parameter: ${PARAM}"
  fi
done
exec ~/.local/bin/sigenergy2mqtt \
    "${CMD_PARAMETERS[@]}"